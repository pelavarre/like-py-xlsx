,,,,
,,,,
,List,,,
,,,,
,for when you have one List of 1 or more Item's,,,
,"but you want Bool, Int, Str, or more List's of Item's",,,
,,,,
,,,,
,,,,def list.all(items)
,list,list.all(items),,"=LAMBDA(items, AND(items))"
,,,,
,={0},,,
,0,False,,
,,,,
,={-1;0.0;+1},,,
,-1,False,,
,0,,,
,1,,,
,,,,
,"={1.23;TRUE;""abc""}",,,
,1.23,True,,
,True,,,
,abc,,,
,,,,
,,,,
,,,,def list.any(items)
,items,list.any(items),,"=LAMBDA(items, OR(items))"
,,,,
,={1},,,
,1,True,,
,,,,
,={0;1;0},,,
,0,True,,
,1,,,
,0,,,
,,,,
,={0;0;0},,,
,0,False,,
,0,,,
,0,,,
,,,,
,,,,
,,,,def list.bool(items)
,items,list.bool(items),,"=LAMBDA(items,#VALUE!)"
,,,,
,={0;1},#VALUE!,,# Our Bool of List is ValueError
,0,,,# because Bools of Lists of >= 1 Items would all be True
,1,,,
,,,,
,=SEQUENCE(0),,,# Excel raises CalcError to block lists of zero items
,#CALC!,,,
,,,,
,=0,=TYPE(items),,# Excel often doesn't distinguish an Int from a List of one Int
,0,1,,
,,,,
,=0,=ROWS(items),,
,0,1,,
,,,,
,={0},=TYPE(items),,
,0,1,,
,,,,
,,,,
,,,,
,,=TYPE({0}),,
,,64,,
,,,,
,,,,
,,,,def list.enumerate(items)
,items,list.enumerate(items),,"=LAMBDA(items,
    CHOOSE({1,2},
        SEQUENCE(ROWS(items)) - 1,
        items
))"
,,,,
,"={""abc"";""def""}",,,
,abc,0,abc,
,def,1,def,
,,,,
,,,,
,,,,"def list.item(items, which)"
,,,,"=LAMBDA(items, which,
    IF(which < 0,
        INDEX(items, ROWS(items) + 1 + which),
        INDEX(items, 1 + which)
))"
,items,,,
,,,,
,={11;22;33},,,
,11,"=list.item(items, 0)",,
,22,11,,
,33,,,
,,"=list.item(items, 2)",,
,,33,,
,,,,
,,"=list.item(items,-2)",,
,,22,,
,,,,
,,"=list.item(items,-1)",,
,,33,,
,,,,
,"=SEQUENCE(3, 2)","=TRANSPOSE(INDEX(items, 2, 0))",,# Excel takes code 0 to mean talk of whole rows or whole columns
1,2,3,,
3,4,4,,
5,6,,,
,,,,
,,,,
,,,,def list.len(items)
,items,=list.len(items),,"=LAMBDA(items, ROWS(items))"
,,,,
,"={""abc"";""def""}",,,
,abc,2,,
,def,,,
,,,,
1,2,3,,
3,4,,,
5,6,,,
,,,,
,,,,def list.repr.item(obj)
,obj,list.repr.item(obj),,"=LAMBDA(obj,
        SWITCH(TYPE(obj),
            1, int.repr(obj),
            2, str.repr(obj),
            4, bool.repr(obj),
            128, function.repr(obj),
            ""<"" & obj & "">""
))"
,,,,"# differs from _repr by having no clause of:  64, list.repr(obj),"
,1,1,,# injecting that clause somehow raises NumError
,,,,
,Aa,'Aa',,
,,,,
,=SEQUENCE(4),,,
,1,<1>,,
,2,<2>,,
,3,<3>,,
,4,<4>,,
,,,,
,,,,
,,,,def list.repr.map(items)
,items,list.repr.map(items),,"=LAMBDA(items,
    LET(
        head, INDEX(items, 1, 1),
        stops, SEQUENCE(ROWS(items)),
        IF(stops = 1,
            list.repr.item(head),
            LET(
                tail_stops, 1 + SEQUENCE(ROWS(items) - 1),
                tails, INDEX(items, tail_stops),
                tail_reprs, list.repr.map(tails),
                INDEX(tail_reprs, stops - 1)
))))"
,,,,
,=SEQUENCE(4),,,
,1,1,,
,2,2,,
,3,3,,
,4,4,,
,,,,
,"={""aa"";""bb"";""cc""; ""dd""}",,,
,aa,'aa',,
,bb,'bb',,
,cc,'cc',,
,dd,'dd',,
,,,,
,,,,
,,,,def list.repr(items)
,items,list.repr(items),,"=LAMBDA(items,
    LET(
        ignore_empty_eq_false, FALSE,
        ""["" & TEXTJOIN(
            "", "",
            ignore_empty_eq_false,
            list.repr.map(items)) & ""]""
))"
,,,,
,=SEQUENCE(3),,,
,1,"[1, 2, 3]",,
,2,,,
,3,,,
,,,,
,"={""aa"";""bb"";""cc""}",,,
,aa,"['aa', 'bb', 'cc']",,
,bb,,,
,cc,,,
,,,,
,"={TRUE;1;2.34;""Abc""}",,,
,True,"[True, 1, 2.34, 'Abc']",,
,1,,,
,2.34,,,
,Abc,,,
,,,,
,"=SEQUENCE(3, 2)",,,
1,2,#REF!,,# TODO: our code raises RefError for Repr of List of Lists
3,4,,,
5,6,,,
,,,,
,,,,def list.reversed(items)
,"=str.join("""", list.reversed(str.list(""Abracadabra"")))",,,"=LAMBDA(items,
    LET(
        stops, 1 + ROWS(items) - SEQUENCE(ROWS(items)),
        picks, INDEX(items, stops),
        picks
))"
,arbadacarbA,,,
,,,,
,,,,
,,,,def list.set.shuffled(items)
,=list.set.shuffled(SEQUENCE(5)),,,"=LAMBDA(items,
    LET(
        picks, INDEX(items, SEQUENCE(ROWS(items)), 1),
        weights, RANDARRAY(ROWS(items)),
        weighted, CHOOSE({1,2}, weights, picks),
        spread, SORT(weighted),
        shuffled, INDEX(spread, 0, 2),
        shuffled
))"
,1,,,
,3,,,
,4,,,
,5,,,
,2,,,
,,,,def list.set(items)
,=list.set({1;1;2;1;2;3;1;2;3;4;5}),,,"=LAMBDA(items,
    LET(
        picks, INDEX(items, SEQUENCE(ROWS(items)), 1),
        uniques, UNIQUE(picks),
        shuffled, list.set.shuffled(uniques),
        shuffled
))"
,1,,,
,4,,,
,3,,,
,2,,,
,5,,,
,,,,
,,,,
,,,,def list.sorted(items)
,,,,"=LAMBDA(items, SORT(items))"
,"=str.join("""", list.sorted(str.list(""Abracadabra"")))",,,
,Aaaaabbcdrr,,,
,,,,
,,,,
,,,,
,,,,
