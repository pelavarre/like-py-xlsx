

,Int

,for when you have one I of Int
,"but you want Str, Bit Length, Bool, Char, or List of Ints"
,except do remember Excel lets you call Bool and Float methods on Ints


,,,,def int.ascii(i)
,i,int.ascii(i),,"=LAMBDA(i, """" & i)"
,-123,-123,,# same code for:  def int.ascii/ .repr/ .str
,-1,-1,,# Excel renders Str of Int same as Int
,0,0
,1,1
,123,123

,123.456,123.456,,# Excel does not truncate Float to make Str of Int


,,,,def int.bin(i)
,i,int.bin(i),,"=LAMBDA(i, ""0b"" & DEC2BIN(i))"

,0,0b0
,90,0b1011010,,# aka 0b_101_1010
,-1,0b1111111111,,"# aka 0b11_1111_1111, because Excel sees negative as 10 bits"

,-1.9,0b1111111111,,# Excel truncates Float to make Int
,2.9,0b10

,-513,#NUM!,,# Excel raises NumError to block i < -0b10_0000_0000
,-512,0b1000000000,,# aka 0b10_0000_0000
,511,0b111111111,,# aka 0b01_1111_1111
,512,#NUM!,,# Excel raises NumError to block i > +0b01_1111_1111


,,,,def int.bit_length(i)
,i,int.bit_length(i),,"=LAMBDA(i, INT(IF(i, LOG(ABS(i), 2) + 1)))"
,-256,9,,# TODO: solve for larger i such as 2^45-1 that Excel gets wrong here
,-128,8,,# Python codes it differently to work for larger i such as 2^48 - 1
,-1,1
,0,0
,1,1
,127,7
,255,8


,,,,def int.bool(i)
,i,int.bool(i),,"=LAMBDA(i, IF(i, TRUE))"
,-1,True,,# same code for def:  int.bool/ float.bool
,0,False


,,,,def int.chr(i)
,i,int.chr(i),,"=LAMBDA(i, UNICHAR(i))"

,65,A
,8984,âŒ˜

,0,#VALUE!,,# Excel raises ValueError to block working with \u0000


,i,int.float(i),,def int.float(i)
,0,0,,"=LAMBDA(i, i)"
,,,,# Excel does Not distinguish Floats of integers from Ints of integers


,,,,def int.hex(i)
,i,int.hex(i),,"=LAMBDA(i, ""0x"" & DEC2HEX(i))"

,0,0x0
,90,0x5A
,-1,0xFFFFFFFFFF,,"# aka 0xFF_FFFF_FFFF, because Excel sees negative as 10 nybbles"

,-1.9,0xFFFFFFFFFF,,# Excel truncates Float to make Int
,16.9,0x10

,-549755813889,#NUM!,,# Excel raises NumError to block i < -0x80_0000_0000
,-549755813888,0x8000000000,,# aka 0x80_0000_0000
,549755813887,0x7FFFFFFFFF,,# aka 0x7F_FFFF_FFFF
,549755813888,#NUM!,,# Excel raises NumError to block i > +0x7F_FFFF_FFFF


,,,,def int.oct(i)
,i,int.oct(i),,"=LAMBDA(i, ""0x"" & DEC2OCT(i))"

,0,0x0
,90,0x132
,-1,0x7777777777,,"# aka 0o7_777_777_777, because Excel sees negative as 10 triples"

,-1.9,0x7777777777,,# Excel truncates Float to make Int
,8.9,0x10

,-536870913,#NUM!,,# Excel raises NumError to block i < -0o4_000_000_000
,-536870912,0x4000000000,,# aka 0o4_000_000_000
,536870911,0x3777777777,,# aka 0o3_777_777_777
,536870912,#NUM!,,# Excel raises NumError to block i > +0o3_777_777_777


,,,,def int.range(stop)
,stop,int.range(stop),,"=LAMBDA(stop, SEQUENCE(IF(stop >= 0, stop)) - 1)"

,1,0

,3,0
,,1
,,2

,2.9,0,,# Excel truncates one Float to make List of Int
,,1


,0,#VALUE!,,# Excel raises CalcError to reject empty lists
,-1,#VALUE!,,"# We raise CalcError, where Excel raises ValueError, to reject negative lengths"


,,,,"def int.range_stop(start, stop)"
,"start, stop","int.range_stop(
start, stop
)",,"=LAMBDA(start, stop,
    IF(start < stop,
        start + SEQUENCE(stop - start) - 1,
        SEQUENCE(0)
))"

,3,3
,4

,3,3
,6,4
,,5

,-1,-1
,2,0
,,1


,-0.4,-0.4,,# Excel does Not truncate 2 Floats to make List of Ints
,2.7,0.6000000000000001
,,1.6

,,,,"def int.range_step(start, stop, step)"
,"start, stop, step","int.range_step(
start, stop, step
)",,"=LAMBDA(start, stop, step,
    IF(AND(start < stop, step),
        start + step * SEQUENCE((stop - start + step - 1) / step),
        SEQUENCE(0)
))"

,-2,0
,4,2
,2,4

,-2,0
,3,2
,2,4

,-0.4,0.5,,# Excel does Not truncate 3 Floats to make List of Ints
,2.7,1.4
,0.9,2.3000000000000003


,,,,def int.repr(i)
,f,_repr(int.repr(i)),,"=LAMBDA(i, """" & i)"
,-12,'-12'


,,,,def int.str(i)
,,,,"=LAMBDA(i, """" & i)"
,f,int.str(f)
,-34,-34


,,,,"def int.str_base(i, base)"
,,,,"# TODO: solve the larger i that Excel leaves unsolved, like to =>"
,,,,# TODO: catch and solve NumError's above inside Bin/ Hex/ Oct
